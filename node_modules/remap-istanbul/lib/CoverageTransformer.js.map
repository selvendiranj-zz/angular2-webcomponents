{"version":3,"sources":["../src/CoverageTransformer.js"],"names":["sourceMapRegEx","CoverageTransformer","options","basePath","warn","console","exclude","fileName","indexOf","match","useAbsolutePaths","readJSON","filePath","existsSync","Error","JSON","parse","readFileSync","readFile","sourceStore","sources","sparceCoverageCollector","fileCoverage","rawSourceMap","sourceMapDir","dirname","codeIsArray","inputSourceMap","codeFromFile","jsText","code","Array","isArray","join","exec","Buffer","toString","sourceMapPath","String","split","error","setCoverage","map","srcPath","tempVal","sourceRoot","test","substr","resolve","sourceMap","inlineSourceMap","origSourceFilename","origFileName","sourcesContent","extname","length","file","replace","forEach","source","idx","setSourceCode","set","resolvePath","resolvedSource","relative","process","cwd","getMappingResolved","location","mapping","Object","assign","keys","branchMap","index","genItem","hits","b","info","updateBranch","srcItem","fnMap","f","updateFunction","statementMap","s","updateStatement","loc","srcCoverage","getFinalCoverage","getPath","absolutePath","fullSourceMapPath","path","item","addFileCoverage","collector","add","filter","reduce","obj","name"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA,MAAMA,iBAAiB,kFAAvB;;MAEqBC,mB;AACpB,gCAAYC,OAAZ,EAAqB;AAAA;;AACpB,SAAKC,QAAL,GAAgBD,QAAQC,QAAxB;AACA,SAAKC,IAAL,GAAYF,QAAQE,IAAR,IAAgBC,QAAQD,IAApC;;AAEA,SAAKE,OAAL,GAAe;AAAA,YAAM,KAAN;AAAA,KAAf;AACA,QAAIJ,QAAQI,OAAZ,EAAqB;AACpB,SAAI,OAAOJ,QAAQI,OAAf,KAA2B,UAA/B,EAA2C;AAC1C,WAAKA,OAAL,GAAeJ,QAAQI,OAAvB;AACA,MAFD,MAEO,IAAI,OAAOJ,QAAQI,OAAf,KAA2B,QAA/B,EAAyC;AAC/C,WAAKA,OAAL,GAAe,UAACC,QAAD;AAAA,cAAcA,SAASC,OAAT,CAAiBN,QAAQI,OAAzB,IAAoC,CAAC,CAAnD;AAAA,OAAf;AACA,MAFM,MAEA;AACN,WAAKA,OAAL,GAAe,UAACC,QAAD;AAAA,cAAcA,SAASE,KAAT,CAAeP,QAAQI,OAAvB,CAAd;AAAA,OAAf;AACA;AACD;;AAED,SAAKI,gBAAL,GAAwB,CAAC,CAACR,QAAQQ,gBAAlC;;AAEA,SAAKC,QAAL,GAAgBT,QAAQS,QAAR,IACZ,SAASA,QAAT,CAAkBC,QAAlB,EAA4B;AAC9B,SAAI,CAAC,iBAAGC,UAAH,CAAcD,QAAd,CAAL,EAA8B;AAC7B,WAAKR,IAAL,CAAUU,iCAA+BF,QAA/B,OAAV;AACA,aAAO,IAAP;AACA;AACD,YAAOG,KAAKC,KAAL,CAAW,iBAAGC,YAAH,CAAgBL,QAAhB,CAAX,CAAP;AACA,KAPF;;AASA,SAAKM,QAAL,GAAgBhB,QAAQgB,QAAR,IACZ,SAASA,QAAT,CAAkBN,QAAlB,EAA4B;AAC9B,SAAI,CAAC,iBAAGC,UAAH,CAAcD,QAAd,CAAL,EAA8B;AAC7B,WAAKR,IAAL,CAAU,IAAIU,KAAJ,4BAAmCF,QAAnC,OAAV;AACA,aAAO,EAAP;AACA;AACD,YAAO,iBAAGK,YAAH,CAAgBL,QAAhB,CAAP;AACA,KAPF;;AASA,SAAKO,WAAL,GAAmBjB,QAAQkB,OAA3B;;AAEA,SAAKC,uBAAL,GAA+B,uCAA/B;AACA;;;;oCAEeT,Q,EAAUU,Y,EAAc;AAAA;;AACvC,SAAI,KAAKhB,OAAL,CAAaM,QAAb,CAAJ,EAA4B;AAC3B,WAAKR,IAAL,kBAAyBQ,QAAzB;AACA;AACA;;AAED,SAAIW,qBAAJ;AACA,SAAIC,eAAe,mBAAKC,OAAL,CAAab,QAAb,CAAnB;AACA,SAAIc,cAAc,IAAlB;AACA,SAAIJ,aAAaK,cAAjB,EAAiC;AAChCJ,qBAAeD,aAAaK,cAA5B;AACA,MAFD,MAEO;AACN;AACA,UAAIC,eAAe,KAAnB;AACA,UAAIC,SAASP,aAAaQ,IAA1B;AACA,UAAI,CAACD,MAAL,EAAa;AACZA,gBAAS,KAAKX,QAAL,CAAcN,QAAd,CAAT;AACAgB,sBAAe,IAAf;AACA;AACD,UAAIG,MAAMC,OAAN,CAAcH,MAAd,CAAJ,EAA2B;AAAE;AAC5BA,gBAASA,OAAOI,IAAP,CAAY,IAAZ,CAAT;AACA,OAFD,MAEO;AACNP,qBAAc,KAAd;AACA;AACD,UAAIjB,QAAQT,eAAekC,IAAf,CAAoBL,MAApB,CAAZ;;AAEA,UAAI,CAACpB,KAAD,IAAU,CAACmB,YAAf,EAA6B;AAC5BF,qBAAc,KAAd;AACAG,gBAAS,KAAKX,QAAL,CAAcN,QAAd,CAAT;AACAH,eAAQT,eAAekC,IAAf,CAAoBL,MAApB,CAAR;AACA;;AAED,UAAIpB,KAAJ,EAAW;AACV,WAAIA,MAAM,CAAN,CAAJ,EAAc;AACbc,uBAAeR,KAAKC,KAAL,CAAY,IAAImB,MAAJ,CAAW1B,MAAM,CAAN,CAAX,EAAqB,QAArB,EAA+B2B,QAA/B,CAAwC,MAAxC,CAAZ,CAAf;AACA,QAFD,MAEO;AACN,YAAMC,gBAAgB,mBAAKJ,IAAL,CAAUT,YAAV,EAAwBf,MAAM,CAAN,CAAxB,CAAtB;AACAc,uBAAe,KAAKZ,QAAL,CAAc0B,aAAd,CAAf;AACAb,uBAAe,mBAAKC,OAAL,CAAaY,aAAb,CAAf;AACA;AACD;AACD;;AAED,SAAI,CAACd,YAAL,EAAmB;AAClB;AACA,WAAKnB,IAAL,CAAU,IAAIU,KAAJ,sCAA6CF,QAA7C,OAAV;AACA,UAAI;AACHU,oBAAaQ,IAAb,GAAoBQ,OAAO,iBAAGrB,YAAH,CAAgBL,QAAhB,CAAP,EAAkC2B,KAAlC,CAAwC,IAAxC,CAApB;AACA,OAFD,CAEE,OAAOC,KAAP,EAAc;AACf,YAAKpC,IAAL,CAAU,IAAIU,KAAJ,+BAAsCF,QAAtC,OAAV;AACA;AACD,WAAKS,uBAAL,CAA6BoB,WAA7B,CAAyC7B,QAAzC,EAAmDU,YAAnD;AACA;AACA;;AAEDE,oBAAe,KAAKrB,QAAL,IAAiBqB,YAAhC;;AAEA;AACA;AACA;AACAD,kBAAaH,OAAb,GAAuBG,aAAaH,OAAb,CAAqBsB,GAArB,CAAyB,UAACC,OAAD,EAAa;AAC5D,UAAIC,UAAUD,OAAd;AACA,UAAIpB,aAAasB,UAAjB,EAA6B;AAC5BD,iBAAU,OAAOE,IAAP,CAAYvB,aAAasB,UAAzB,IACPtB,aAAasB,UAAb,GAA0BF,OADnB,GAEPA,OAFH;AAGA;AACD,aAAOC,QAAQG,MAAR,CAAe,CAAf,EAAkB,CAAlB,MAAyB,GAAzB,GACJ,mBAAKC,OAAL,CAAaxB,YAAb,EAA2BoB,OAA3B,CADI,GAEJA,OAFH;AAGA,MAVsB,CAAvB;;AAYA,SAAIK,YAAY,qCAAsB1B,YAAtB,CAAhB;;AAEA;AACA,SAAM2B,kBAAkB,EAAxB;AACA,SAAIC,2BAAJ;AACA,SAAIC,qBAAJ;AACA,SAAI7C,iBAAJ;;AAEA,SAAI0C,UAAUI,cAAd,EAA8B;AAC7BF,2BAAqB5B,aAAaH,OAAb,CAAqB,CAArB,CAArB;;AAEA,UAAI+B,sBAAsB,mBAAKG,OAAL,CAAaH,kBAAb,MAAqC,EAA3D,IAAiE5B,aAAaH,OAAb,CAAqBmC,MAArB,KAAgC,CAArG,EAAwG;AACvGH,sBAAe7B,aAAaiC,IAA5B;AACAjD,kBAAWK,SAAS6C,OAAT,CAAiB,mBAAKH,OAAL,CAAaF,YAAb,CAAjB,EAA6C,mBAAKE,OAAL,CAAaH,kBAAb,CAA7C,CAAX;AACA5B,oBAAaiC,IAAb,GAAoBjD,QAApB;AACAgB,oBAAaH,OAAb,GAAuB,CAACb,QAAD,CAAvB;AACAgB,oBAAasB,UAAb,GAA0B,EAA1B;AACAI,mBAAY,qCAAsB1B,YAAtB,CAAZ;AACA;;AAED0B,gBAAUI,cAAV,CAAyBK,OAAzB,CAAiC,UAACC,MAAD,EAASC,GAAT,EAAiB;AACjDV,uBAAgBD,UAAU7B,OAAV,CAAkBwC,GAAlB,CAAhB,IAA0C,IAA1C;AACA,aAAKvC,uBAAL,CAA6BwC,aAA7B,CACCZ,UAAU7B,OAAV,CAAkBwC,GAAlB,CADD,EAEClC,cAAciC,OAAOpB,KAAP,CAAa,IAAb,CAAd,GAAmCoB,MAFpC;AAIA,WAAI,MAAKxC,WAAT,EAAsB;AACrB,cAAKA,WAAL,CAAiB2C,GAAjB,CAAqBb,UAAU7B,OAAV,CAAkBwC,GAAlB,CAArB,EAA6CD,MAA7C;AACA;AACD,OATD;AAUA;;AAED,SAAMI,cAAc,SAAdA,WAAc,CAACJ,MAAD,EAAY;AAC/B,UAAIK,iBAAiBL,UAAUT,eAAV,GAClBS,MADkB,GAElB,mBAAKX,OAAL,CAAaxB,YAAb,EAA2BmC,MAA3B,CAFH;;AAIA,UAAI,CAAC,MAAKjD,gBAAN,IAA0B,EAAEiD,UAAUT,eAAZ,CAA9B,EAA4D;AAC3Dc,wBAAiB,mBAAKC,QAAL,CAAcC,QAAQC,GAAR,EAAd,EAA6BH,cAA7B,CAAjB;AACA;AACD,aAAOA,cAAP;AACA,MATD;;AAWA,SAAMI,qBAAqB,SAArBA,kBAAqB,CAACC,QAAD,EAAc;AACxC,UAAMC,UAAU,0BAAWrB,SAAX,EAAsBoB,QAAtB,CAAhB;AACA,UAAI,CAACC,OAAL,EAAc,OAAO,IAAP;;AAEd,aAAOC,OAAOC,MAAP,CAAcF,OAAd,EAAuB,EAAEX,QAAQI,YAAYO,QAAQX,MAApB,CAAV,EAAvB,CAAP;AACA,MALD;;AAOAY,YAAOE,IAAP,CAAYnD,aAAaoD,SAAzB,EAAoChB,OAApC,CAA4C,UAACiB,KAAD,EAAW;AACtD,UAAMC,UAAUtD,aAAaoD,SAAb,CAAuBC,KAAvB,CAAhB;AACA,UAAME,OAAOvD,aAAawD,CAAb,CAAeH,KAAf,CAAb;;AAEA,UAAMI,OAAO,2BAAYH,OAAZ,EAAqBR,kBAArB,CAAb;;AAEA,UAAIW,IAAJ,EAAU;AACT,aAAK1D,uBAAL,CAA6B2D,YAA7B,CAA0CD,KAAKpB,MAA/C,EAAuDoB,KAAKE,OAA5D,EAAqEJ,IAArE;AACA;AACD,MATD;;AAWAN,YAAOE,IAAP,CAAYnD,aAAa4D,KAAzB,EAAgCxB,OAAhC,CAAwC,UAACiB,KAAD,EAAW;AAClD,UAAMC,UAAUtD,aAAa4D,KAAb,CAAmBP,KAAnB,CAAhB;AACA,UAAME,OAAOvD,aAAa6D,CAAb,CAAeR,KAAf,CAAb;;AAEA,UAAMI,OAAO,6BAAcH,OAAd,EAAuBR,kBAAvB,CAAb;;AAEA,UAAIW,IAAJ,EAAU;AACT,aAAK1D,uBAAL,CAA6B+D,cAA7B,CAA4CL,KAAKpB,MAAjD,EAAyDoB,KAAKE,OAA9D,EAAuEJ,IAAvE;AACA;AACD,MATD;;AAWAN,YAAOE,IAAP,CAAYnD,aAAa+D,YAAzB,EAAuC3B,OAAvC,CAA+C,UAACiB,KAAD,EAAW;AACzD,UAAMC,UAAUtD,aAAa+D,YAAb,CAA0BV,KAA1B,CAAhB;AACA,UAAME,OAAOvD,aAAagE,CAAb,CAAeX,KAAf,CAAb;;AAEA,UAAML,UAAUF,mBAAmBQ,OAAnB,CAAhB;;AAEA,UAAIN,OAAJ,EAAa;AACZ,aAAKjD,uBAAL,CAA6BkE,eAA7B,CAA6CjB,QAAQX,MAArD,EAA6DW,QAAQkB,GAArE,EAA0EX,IAA1E;AACA;AACD,MATD;;AAWA;AACA,SAAMY,cAAc,KAAKpE,uBAAL,CAA6BqE,gBAA7B,EAApB;;AAEA,SAAIzC,UAAUI,cAAV,IAA4B,KAAKlD,QAArC,EAA+C;AAC9C;AACA,UAAMwF,UAAU,SAAVA,OAAU,WAAY;AAC3B,WAAMC,eAAe,mBAAK5C,OAAL,CAAa,MAAK7C,QAAlB,EAA4BS,QAA5B,CAArB;AACA,WAAI,CAAC,MAAKF,gBAAV,EAA4B;AAC3B,eAAO,mBAAKuD,QAAL,CAAcC,QAAQC,GAAR,EAAd,EAA6ByB,YAA7B,CAAP;AACA;AACD,cAAOA,YAAP;AACA,OAND;AAOA,UAAMC,oBAAoBF,QACzBvC,aAAaK,OAAb,CAAqB,mBAAKH,OAAL,CAAaF,YAAb,CAArB,EAAiD,mBAAKE,OAAL,CAAaH,kBAAb,CAAjD,CADyB,CAA1B;AAGAsC,kBAAYI,iBAAZ,IAAiCJ,YAAYlF,QAAZ,CAAjC;AACAkF,kBAAYI,iBAAZ,EAA+BC,IAA/B,GAAsCD,iBAAtC;AACA,aAAOJ,YAAYlF,QAAZ,CAAP;AACA;AACD;;;gCAEWwF,I,EAAM;AAAA;;AACjBxB,YAAOE,IAAP,CAAYsB,IAAZ,EACErC,OADF,CACU,UAAC9C,QAAD,EAAc;AACtB,UAAMU,eAAeyE,KAAKnF,QAAL,CAArB;AACA,aAAKoF,eAAL,CAAqBpF,QAArB,EAA+BU,YAA/B;AACA,MAJF;AAKA;;;uCAEkB;AAAA;;AAClB,SAAM2E,YAAY,6BAAlB;;AAEA,SAAMR,cAAc,KAAKpE,uBAAL,CAA6BqE,gBAA7B,EAApB;;AAEAO,eAAUC,GAAV,CAAc3B,OAAOE,IAAP,CAAYgB,WAAZ,EACZU,MADY,CACL,UAACvF,QAAD;AAAA,aAAc,CAAC,OAAKN,OAAL,CAAaM,QAAb,CAAf;AAAA,MADK,EAEZwF,MAFY,CAEL,UAACC,GAAD,EAAMC,IAAN,EAAe;AACtBD,UAAIC,IAAJ,IAAYb,YAAYa,IAAZ,CAAZ;AACA,aAAOD,GAAP;AACA,MALY,EAKV,EALU,CAAd;;AAOA;AACAJ,eAAUP,gBAAV;;AAEA,YAAOO,SAAP;AACA;;;;;;oBAjPmBhG,mB","file":"CoverageTransformer.js","sourcesContent":["import { Collector } from '../utils/node!istanbul';\nimport path from '../utils/node!path';\nimport fs from '../utils/node!fs';\nimport { SourceMapConsumer } from '../utils/node!source-map';\nimport SparceCoverageCollector from './SparceCoverageCollector';\nimport getMapping from './getMapping';\nimport remapFunction from './remapFunction';\nimport remapBranch from './remapBranch';\n\nconst sourceMapRegEx = /(?:\\/{2}[#@]{1,2}|\\/\\*)\\s+sourceMappingURL\\s*=\\s*(data:(?:[^;]+;)+base64,)?(\\S+)/;\n\nexport default class CoverageTransformer {\n\tconstructor(options) {\n\t\tthis.basePath = options.basePath;\n\t\tthis.warn = options.warn || console.warn;\n\n\t\tthis.exclude = () => false;\n\t\tif (options.exclude) {\n\t\t\tif (typeof options.exclude === 'function') {\n\t\t\t\tthis.exclude = options.exclude;\n\t\t\t} else if (typeof options.exclude === 'string') {\n\t\t\t\tthis.exclude = (fileName) => fileName.indexOf(options.exclude) > -1;\n\t\t\t} else {\n\t\t\t\tthis.exclude = (fileName) => fileName.match(options.exclude);\n\t\t\t}\n\t\t}\n\n\t\tthis.useAbsolutePaths = !!options.useAbsolutePaths;\n\n\t\tthis.readJSON = options.readJSON\n\t\t\t|| function readJSON(filePath) {\n\t\t\t\tif (!fs.existsSync(filePath)) {\n\t\t\t\t\tthis.warn(Error(`Could not find file: \"${filePath}\"`));\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\treturn JSON.parse(fs.readFileSync(filePath));\n\t\t\t};\n\n\t\tthis.readFile = options.readFile\n\t\t\t|| function readFile(filePath) {\n\t\t\t\tif (!fs.existsSync(filePath)) {\n\t\t\t\t\tthis.warn(new Error(`Could not find file: \"${filePath}\"`));\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t\treturn fs.readFileSync(filePath);\n\t\t\t};\n\n\t\tthis.sourceStore = options.sources;\n\n\t\tthis.sparceCoverageCollector = new SparceCoverageCollector();\n\t}\n\n\taddFileCoverage(filePath, fileCoverage) {\n\t\tif (this.exclude(filePath)) {\n\t\t\tthis.warn(`Excluding: \"${filePath}\"`);\n\t\t\treturn;\n\t\t}\n\n\t\tlet rawSourceMap;\n\t\tlet sourceMapDir = path.dirname(filePath);\n\t\tlet codeIsArray = true;\n\t\tif (fileCoverage.inputSourceMap) {\n\t\t\trawSourceMap = fileCoverage.inputSourceMap;\n\t\t} else {\n\t\t\t/* coverage.json can sometimes include the code inline */\n\t\t\tlet codeFromFile = false;\n\t\t\tlet jsText = fileCoverage.code;\n\t\t\tif (!jsText) {\n\t\t\t\tjsText = this.readFile(filePath);\n\t\t\t\tcodeFromFile = true;\n\t\t\t}\n\t\t\tif (Array.isArray(jsText)) { /* sometimes the source is an array */\n\t\t\t\tjsText = jsText.join('\\n');\n\t\t\t} else {\n\t\t\t\tcodeIsArray = false;\n\t\t\t}\n\t\t\tlet match = sourceMapRegEx.exec(jsText);\n\t\t\t\n\t\t\tif (!match && !codeFromFile) {\n\t\t\t\tcodeIsArray = false;\n\t\t\t\tjsText = this.readFile(filePath);\n\t\t\t\tmatch = sourceMapRegEx.exec(jsText);\n\t\t\t}\n\t\t\t\n\t\t\tif (match) {\n\t\t\t\tif (match[1]) {\n\t\t\t\t\trawSourceMap = JSON.parse((new Buffer(match[2], 'base64').toString('utf8')));\n\t\t\t\t} else {\n\t\t\t\t\tconst sourceMapPath = path.join(sourceMapDir, match[2]);\n\t\t\t\t\trawSourceMap = this.readJSON(sourceMapPath);\n\t\t\t\t\tsourceMapDir = path.dirname(sourceMapPath);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!rawSourceMap) {\n\t\t\t/* We couldn't find a source map, so will copy coverage after warning. */\n\t\t\tthis.warn(new Error(`Could not find source map for: \"${filePath}\"`));\n\t\t\ttry {\n\t\t\t\tfileCoverage.code = String(fs.readFileSync(filePath)).split('\\n');\n\t\t\t} catch (error) {\n\t\t\t\tthis.warn(new Error(`Could find source for : \"${filePath}\"`));\n\t\t\t}\n\t\t\tthis.sparceCoverageCollector.setCoverage(filePath, fileCoverage);\n\t\t\treturn;\n\t\t}\n\n\t\tsourceMapDir = this.basePath || sourceMapDir;\n\n\t\t// Clean up source map paths:\n\t\t// * prepend sourceRoot if it is set\n\t\t// * replace relative paths in source maps with absolute\n\t\trawSourceMap.sources = rawSourceMap.sources.map((srcPath) => {\n\t\t\tlet tempVal = srcPath;\n\t\t\tif (rawSourceMap.sourceRoot) {\n\t\t\t\ttempVal = /\\/$/g.test(rawSourceMap.sourceRoot)\n\t\t\t\t\t? rawSourceMap.sourceRoot + srcPath\n\t\t\t\t\t: srcPath;\n\t\t\t}\n\t\t\treturn tempVal.substr(0, 1) === '.'\n\t\t\t\t? path.resolve(sourceMapDir, tempVal)\n\t\t\t\t: tempVal\n\t\t});\t\t\n\t\t\n\t\tlet sourceMap = new SourceMapConsumer(rawSourceMap);\n\n\t\t/* if there are inline sources and a store to put them into, we will populate it */\n\t\tconst inlineSourceMap = {};\n\t\tlet origSourceFilename;\n\t\tlet origFileName;\n\t\tlet fileName;\n\n\t\tif (sourceMap.sourcesContent) {\n\t\t\torigSourceFilename = rawSourceMap.sources[0];\n\n\t\t\tif (origSourceFilename && path.extname(origSourceFilename) !== '' && rawSourceMap.sources.length === 1) {\n\t\t\t\torigFileName = rawSourceMap.file;\n\t\t\t\tfileName = filePath.replace(path.extname(origFileName), path.extname(origSourceFilename));\n\t\t\t\trawSourceMap.file = fileName;\n\t\t\t\trawSourceMap.sources = [fileName];\n\t\t\t\trawSourceMap.sourceRoot = '';\n\t\t\t\tsourceMap = new SourceMapConsumer(rawSourceMap);\n\t\t\t}\n\n\t\t\tsourceMap.sourcesContent.forEach((source, idx) => {\n\t\t\t\tinlineSourceMap[sourceMap.sources[idx]] = true;\n\t\t\t\tthis.sparceCoverageCollector.setSourceCode(\n\t\t\t\t\tsourceMap.sources[idx],\n\t\t\t\t\tcodeIsArray ? source.split('\\n') : source\n\t\t\t\t);\n\t\t\t\tif (this.sourceStore) {\n\t\t\t\t\tthis.sourceStore.set(sourceMap.sources[idx], source);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tconst resolvePath = (source) => {\n\t\t\tlet resolvedSource = source in inlineSourceMap\n\t\t\t\t? source\n\t\t\t\t: path.resolve(sourceMapDir, source);\n\n\t\t\tif (!this.useAbsolutePaths && !(source in inlineSourceMap)) {\n\t\t\t\tresolvedSource = path.relative(process.cwd(), resolvedSource);\n\t\t\t}\n\t\t\treturn resolvedSource;\n\t\t};\n\n\t\tconst getMappingResolved = (location) => {\n\t\t\tconst mapping = getMapping(sourceMap, location);\n\t\t\tif (!mapping) return null;\n\n\t\t\treturn Object.assign(mapping, { source: resolvePath(mapping.source) });\n\t\t};\n\n\t\tObject.keys(fileCoverage.branchMap).forEach((index) => {\n\t\t\tconst genItem = fileCoverage.branchMap[index];\n\t\t\tconst hits = fileCoverage.b[index];\n\n\t\t\tconst info = remapBranch(genItem, getMappingResolved);\n\n\t\t\tif (info) {\n\t\t\t\tthis.sparceCoverageCollector.updateBranch(info.source, info.srcItem, hits);\n\t\t\t}\n\t\t});\n\n\t\tObject.keys(fileCoverage.fnMap).forEach((index) => {\n\t\t\tconst genItem = fileCoverage.fnMap[index];\n\t\t\tconst hits = fileCoverage.f[index];\n\n\t\t\tconst info = remapFunction(genItem, getMappingResolved);\n\n\t\t\tif (info) {\n\t\t\t\tthis.sparceCoverageCollector.updateFunction(info.source, info.srcItem, hits);\n\t\t\t}\n\t\t});\n\n\t\tObject.keys(fileCoverage.statementMap).forEach((index) => {\n\t\t\tconst genItem = fileCoverage.statementMap[index];\n\t\t\tconst hits = fileCoverage.s[index];\n\n\t\t\tconst mapping = getMappingResolved(genItem);\n\n\t\t\tif (mapping) {\n\t\t\t\tthis.sparceCoverageCollector.updateStatement(mapping.source, mapping.loc, hits);\n\t\t\t}\n\t\t});\n\n\t\t// todo: refactor exposing implementation details\n\t\tconst srcCoverage = this.sparceCoverageCollector.getFinalCoverage();\n\n\t\tif (sourceMap.sourcesContent && this.basePath) {\n\t\t\t// Convert path to use base path option\n\t\t\tconst getPath = filePath => {\n\t\t\t\tconst absolutePath = path.resolve(this.basePath, filePath);\n\t\t\t\tif (!this.useAbsolutePaths) {\n\t\t\t\t\treturn path.relative(process.cwd(), absolutePath);\n\t\t\t\t}\n\t\t\t\treturn absolutePath;\n\t\t\t};\n\t\t\tconst fullSourceMapPath = getPath(\n\t\t\t\torigFileName.replace(path.extname(origFileName), path.extname(origSourceFilename))\n\t\t\t);\n\t\t\tsrcCoverage[fullSourceMapPath] = srcCoverage[fileName];\n\t\t\tsrcCoverage[fullSourceMapPath].path = fullSourceMapPath;\n\t\t\tdelete srcCoverage[fileName];\n\t\t}\n\t}\n\n\taddCoverage(item) {\n\t\tObject.keys(item)\n\t\t\t.forEach((filePath) => {\n\t\t\t\tconst fileCoverage = item[filePath];\n\t\t\t\tthis.addFileCoverage(filePath, fileCoverage);\n\t\t\t});\n\t}\n\n\tgetFinalCoverage() {\n\t\tconst collector = new Collector();\n\n\t\tconst srcCoverage = this.sparceCoverageCollector.getFinalCoverage();\n\n\t\tcollector.add(Object.keys(srcCoverage)\n\t\t\t.filter((filePath) => !this.exclude(filePath))\n\t\t\t.reduce((obj, name) => {\n\t\t\t\tobj[name] = srcCoverage[name];\n\t\t\t\treturn obj;\n\t\t\t}, {}));\n\n\t\t/* refreshes the line counts for reports */\n\t\tcollector.getFinalCoverage();\n\n\t\treturn collector;\n\t}\n}\n"]}